#!/usr/bin/env python3
import random
import string
import argparse
import sys

def generate_password(length, use_upper, use_digits, use_special, min_of_each=True):
    """Generate a password with specified characteristics.
    
    Args:
        length (int): Length of password
        use_upper (bool): Include uppercase letters
        use_digits (bool): Include numbers
        use_special (bool): Include special characters
        min_of_each (bool): Ensure at least one of each selected character type
    """
    char_pool = string.ascii_lowercase  # Start with lowercase letters
    required_chars = []
    
    # Add required character types
    if use_upper:
        char_pool += string.ascii_uppercase
        required_chars.append(random.choice(string.ascii_uppercase))
    
    if use_digits:
        char_pool += string.digits
        required_chars.append(random.choice(string.digits))
    
    if use_special:
        char_pool += string.punctuation
        required_chars.append(random.choice(string.punctuation))
    
    # Add a lowercase letter to required chars
    required_chars.append(random.choice(string.ascii_lowercase))
    
    if min_of_each and len(required_chars) > length:
        raise ValueError(f"Password length must be at least {len(required_chars)} to include all required character types")
    
    # Generate the remaining characters
    remaining_length = length - len(required_chars) if min_of_each else length
    password_chars = [random.choice(char_pool) for _ in range(remaining_length)]
    
    if min_of_each:
        password_chars.extend(required_chars)
        random.shuffle(password_chars)
    
    return ''.join(password_chars)

def main():
    parser = argparse.ArgumentParser(
        description="Generate a secure random password.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        'length', 
        type=int, 
        nargs='?', 
        default=12, 
        help="Length of the password"
    )
    parser.add_argument(
        '--no-special', 
        action='store_true',
        help="Exclude special characters"
    )
    parser.add_argument(
        '--no-numbers', 
        action='store_true',
        help="Exclude numbers"
    )
    parser.add_argument(
        '--no-uppercase', 
        action='store_true',
        help="Exclude uppercase letters"
    )
    parser.add_argument(
        '--no-requirements',
        action='store_true',
        help="Don't require at least one of each character type"
    )
    
    try:
        args = parser.parse_args()
        
        # Validate password length
        if args.length < 1:
            print("Error: Password length must be at least 1 character", file=sys.stderr)
            sys.exit(1)
            
        # Settings for password generation
        use_upper = not args.no_uppercase
        use_digits = not args.no_numbers
        use_special = not args.no_special
        min_of_each = not args.no_requirements
        
        try:
            # Generate and display the password
            password = generate_password(args.length, use_upper, use_digits, use_special, min_of_each)
            print(f"Generated password: {password}")
        except ValueError as e:
            print(f"Error: {str(e)}", file=sys.stderr)
            sys.exit(1)
            
    except argparse.ArgumentError as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
